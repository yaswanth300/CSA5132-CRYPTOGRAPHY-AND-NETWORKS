#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to calculate letter frequencies in the ciphertext
void calculateFrequencies(char *ciphertext, int frequencies[]) {
    for (int i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            int index = tolower(ciphertext[i]) - 'a';
            frequencies[index]++;
        }
    }
}

// Function to decrypt the ciphertext using a given key
void decrypt(char *ciphertext, char *key, char *plaintext) {
    for (int i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            char base = islower(ciphertext[i]) ? 'a' : 'A';
            plaintext[i] = key[ciphertext[i] - base];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to print the top N likely plaintexts based on letter frequencies
void printTopPlaintexts(char *ciphertext, char *key, int topN) {
    int frequencies[ALPHABET_SIZE] = {0};
    calculateFrequencies(ciphertext, frequencies);

    // Sort letters by frequency
    int sortedLetters[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        sortedLetters[i] = i;
    }
    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (frequencies[sortedLetters[j]] > frequencies[sortedLetters[i]]) {
                int temp = sortedLetters[i];
                sortedLetters[i] = sortedLetters[j];
                sortedLetters[j] = temp;
            }
        }
    }

    // Guess the most likely plaintexts
    printf("Top %d possible plaintexts:\n", topN);
    for (int n = 1; n <= topN; n++) {
        char plaintext[strlen(ciphertext) + 1];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            key[sortedLetters[i]] = 'A' + (n - 1 + i) % ALPHABET_SIZE;
        }
        decrypt(ciphertext, key, plaintext);
        printf("Plaintext %d: %s\n", n, plaintext);
    }
}

int main() {
    char ciphertext[1000];
    char key[ALPHABET_SIZE + 1] = {0};
    int topN;

    // Read the ciphertext from the user
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);

    // Remove the newline character if present
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    // Read the number of top plaintexts to display from the user
    printf("Enter the number of top plaintexts to display: ");
    scanf("%d", &topN);

    // Print the top N possible plaintexts
    printTopPlaintexts(ciphertext, key, topN);

    return 0;
}
